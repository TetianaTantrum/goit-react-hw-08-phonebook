{"version":3,"file":"static/js/241.e1b83cbf.chunk.js","mappings":"uUAYaA,GAVUC,EAAAA,GAAAA,IAAH,qGAMAA,EAAAA,GAAAA,EAAH,qDAISA,EAAAA,GAAAA,OAAH,kNAWVC,EAAcD,EAAAA,GAAAA,OAAH,iNAYXE,EAAmBF,EAAAA,GAAAA,IAAH,whBAuBhBG,EAAkBH,EAAAA,GAAAA,IAAH,shBAwBfI,EAAWJ,EAAAA,GAAAA,GAAH,sNAaRK,EAAYL,EAAAA,GAAAA,GAAH,4N,6KCjDTM,GAAON,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,0SAwBJQ,GAVQR,EAAAA,GAAAA,GAAH,qLAUOA,EAAAA,GAAAA,MAAH,8YAoBTS,GAAeT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,+EAqBZW,GAfSX,EAAAA,GAAAA,OAAH,8TAeMA,EAAAA,GAAAA,OAAH,kN,UCtGhBY,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,OAAQN,EAAAA,KACLG,IAAI,GAAI,cACRC,IAAI,GAAI,aACRC,SAAS,cA+Cd,EA5CkB,SAAC,GAAmC,IAAjCE,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBACtBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAcJ,EAAQL,KACtBU,EAAgBL,EAAQD,OAC9B,OACE,0BACE,SAAC,KAAD,CACEO,cAAe,CAAEX,KAAK,GAAD,OAAKK,EAAQL,MAAQI,OAAO,GAAD,OAAKC,EAAQD,SAC7DQ,iBAAkBf,EAClBgB,SAAU,SAACC,EAAQC,GACjBR,GACES,EAAAA,EAAAA,IAAY,CACVhB,KAAMc,EAAOd,KACbI,OAAQU,EAAOV,OACfa,GAAIZ,EAAQY,KAEdX,KAEFS,EAAQG,WACT,EAbH,UAeE,UAAC3B,EAAD,YACE,8CACA,UAACE,EAAD,mBAEE,SAAC,KAAD,CAAOO,KAAK,OAAOmB,YAAaV,KAChC,SAACf,EAAD,CAAcM,KAAK,OAAOoB,UAAU,YAEtC,UAAC3B,EAAD,qBAEE,SAAC,KAAD,CAAOO,KAAK,SAASmB,YAAaT,KAClC,SAAChB,EAAD,CAAcM,KAAK,SAASoB,UAAU,YAExC,SAAC,KAAD,WACE,SAACxB,EAAD,CAAWyB,KAAK,SAAhB,UACE,SAAC,MAAD,CAAaC,KAAM,eAOhC,E,UCxDc,SAASC,EAAT,GAA+C,IAA9BlB,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,iBACjCC,GAAWC,EAAAA,EAAAA,MACXgB,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAM9B,OAJAC,EAAAA,EAAAA,YAAU,WACRpB,GAASqB,EAAAA,EAAAA,MACV,GAAE,CAACrB,KAGF,4BACE,SAAC,EAAD,CAAWF,QAASA,EAASC,iBAAkBA,IAC9CkB,IAAa,0CAGnB,C,gFCrBM,IAEMK,EAAwB,SAAAC,GACnC,OAAOA,EAAMC,SAASC,MAAMC,QAAO,SAAA5B,GAAO,OACxCA,EAAQL,KAAKkC,cAAcC,SAASL,EAAMG,OAAOC,cADT,GAG3C,EAEYR,EAAkB,SAAAI,GAAK,OAAIA,EAAMC,SAASP,SAAnB,C","sources":["components/ContactList/ContactListItem.styled.jsx","components/ModalForm/ModalForm.styled.jsx","components/ModalForm/ModalForm.jsx","pages/Modal.jsx","redux/contacts/selectors.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nexport const Item = styled.p`\n  padding: 0;\n  margin: 0;\n`;\nexport const ButtonEdit = styled.button`\n  outline: none;\n  background-color: transparent;\n  border: none;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n  font-family: inherit;\n  color: #ffa032;\n  cursor: pointer;\n`;\nexport const ButtonClose = styled.button`\n  outline: none;\n  background-color: transparent;\n  border: none;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n  font-family: inherit;\n  color: #ff1500;\n  cursor: pointer;\n`;\n\nexport const IconWrapperCross = styled.div`\n  position: relative;\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  background-color: transparent;\n  color: #ff1500;\n  &:hover:after {\n    content: 'Delete?';\n    position: absolute;\n    bottom: -25%;\n    left: 350%;\n    transform: translateX(-50%);\n    background-color: #fff;\n    color: #000000;\n    padding: 10px;\n    border-radius: 5px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n    transition: transform 0.3s ease-out;\n    white-space: nowrap;\n    background-color: none;\n  }\n`;\nexport const IconWrapperEdit = styled.div`\n  position: relative;\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  background-color: transparent;\n  color: #fc851d;\n  &:hover:after {\n    content: 'Edit?';\n    position: absolute;\n    bottom: -25%;\n    left: 350%;\n    transform: translateX(-50%);\n    background-color: #fff;\n    color: #000000;\n    padding: 10px;\n    border-radius: 5px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n    transition: transform 0.3s ease-out;\n    white-space: nowrap;\n    background-color: none;\n  }\n`;\n\nexport const TableRow = styled.tr`\n  background-color: #f5f5f5;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #ebebeb;\n  }\n\n  & > td {\n    padding: 12px;\n    border: none;\n  }\n`;\nexport const TableCell = styled.td`\n  padding: 10px;\n  font-size: 16px;\n  line-height: 1.4;\n  text-align: left;\n  color: #333;\n  border: none;\n  border-bottom: 1px solid #eee;\n\n  &:first-child {\n    font-weight: bold;\n  }\n`;\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\n// export const Form = styled(FormikForm)`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n//   align-items: center;\n//   margin-bottom: 20px;\n// `;\n// export const FormField = styled.label`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n//   justify-content: center;\n//   width: 100%;\n// `;\n\n// export const Inputs = styled(Field)`\n//   border: none;\n//   border-radius: 4px;\n//   background-color: #f2f2f2;\n//   padding: 12px 16px;\n//   transition: box-shadow 0.2s ease-in-out;\n\n//   &:focus {\n//     outline: none;\n//     box-shadow: 0px 0px 5px #0084ff80;\n//   }\n// `;\n\n// export const ErrorMessage = styled(FormikError)`\n//   font-size: 14px;\n//   color: red;\n//   padding: 0;\n// `;\n// export const Button = styled.button`\n//   font-size: 14px;\n//   text-align: center;\n//   padding: 5px 10px;\n//   color: white;\n//   background-color: #5e5e73;\n//   border-radius: 5px;\n//   max-width: 150px;\n// `;\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 auto;\n  /* max-width: 500px; */\n  width: 100%;\n  padding: 32px;\n  margin-bottom: 20px;\n  background-color: #ffffff;\n  box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.16);\n  border-radius: 8px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 16px;\n  letter-spacing: 0.5px;\n  text-align: center;\n  margin-bottom: 16px;\n  color: #4f4f4f;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  width: 100%;\n  font-size: 16px;\n  color: #4f4f4f;\n  input {\n    border: none;\n    border-radius: 4px;\n    background-color: #f2f2f2;\n    padding: 12px 16px;\n    transition: box-shadow 0.2s ease-in-out;\n    &:focus {\n      outline: none;\n      box-shadow: 0px 0px 5px #0084ff80;\n    }\n  }\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: red;\n  font-size: 14px;\n  margin-top: 8px;\n`;\n\nexport const Button = styled.button`\n  margin-top: 24px;\n  padding: 12px 16px;\n  border: none;\n  background-color: #148eff;\n  color: #ffffff;\n  font-size: 16px;\n  font-weight: 500;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n  &:hover {\n    background-color: #0065cc;\n  }\n`;\nexport const ButtonAdd = styled.button`\n  outline: none;\n  background-color: transparent;\n  border: none;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n  font-family: inherit;\n  color: #44d717;\n  cursor: pointer;\n`;\n","import React from 'react';\nimport { FcCheckmark } from 'react-icons/fc';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport { IconWrapperEdit } from 'components/ContactList/ContactListItem.styled';\nimport { ButtonAdd, ErrorMessage, Form, FormField } from './ModalForm.styled';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(13, 'Too Short!')\n    .max(14, 'Too Long!')\n    .required('Required'),\n});\n\nconst ModalForm = ({ contact, handleCloseModal }) => {\n  const dispatch = useDispatch();\n\n  const contactName = contact.name;\n  const contactNumber = contact.number;\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: `${contact.name}`, number: `${contact.number}` }}\n        validationSchema={ContactSchema}\n        onSubmit={(values, actions) => {\n          dispatch(\n            editContact({\n              name: values.name,\n              number: values.number,\n              id: contact.id,\n            }),\n            handleCloseModal()\n          );\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <p>Edit this contact</p>\n          <FormField>\n            Name\n            <Field name=\"name\" placeholder={contactName} />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </FormField>\n          <FormField>\n            Number\n            <Field name=\"number\" placeholder={contactNumber} />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </FormField>\n          <IconWrapperEdit>\n            <ButtonAdd type=\"submit\">\n              <FcCheckmark size={20} />\n            </ButtonAdd>\n          </IconWrapperEdit>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\nexport default ModalForm;\n","import ModalForm from 'components/ModalForm/ModalForm';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Modal({ contact, handleCloseModal }) {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ModalForm contact={contact} handleCloseModal={handleCloseModal} />\n      {isLoading && <div>Loading...</div>}\n    </div>\n  );\n}\n\n// import ModalForm from 'components/ModalForm/ModalForm';\n// import React from 'react';\n// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchContacts } from 'redux/contacts/operations';\n// import { selectIsLoading } from 'redux/contacts/selectors';\n\n// export default function Modal({ contact }) {\n//   const dispatch = useDispatch();\n//   const isLoading = useSelector(selectIsLoading);\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   return (\n//     <div>\n//       <title>Modal</title>\n//       <div>{isLoading && 'Request in progress...'}</div>\n//       <ModalForm contact={contact} key={contact.id} />\n//     </div>\n//   );\n// }\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = state => {\n  return state.contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(state.filter.toLowerCase())\n  );\n};\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n"],"names":["ButtonEdit","styled","ButtonClose","IconWrapperCross","IconWrapperEdit","TableRow","TableCell","Form","FormikForm","FormField","ErrorMessage","FormikError","ButtonAdd","ContactSchema","Yup","shape","name","min","max","required","number","contact","handleCloseModal","dispatch","useDispatch","contactName","contactNumber","initialValues","validationSchema","onSubmit","values","actions","editContact","id","resetForm","placeholder","component","type","size","Modal","isLoading","useSelector","selectIsLoading","useEffect","fetchContacts","selectVisibleContacts","state","contacts","items","filter","toLowerCase","includes"],"sourceRoot":""}